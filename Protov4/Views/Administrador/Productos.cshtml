@using Protov4.DTO;
@{
    Layout = "~/Views/Administrador/_LayoutAdmin.cshtml";
    int currentPage = 1;
    int itemsPerPage = 9; // Debes ajustar esto según tus preferencias

    int totalProducts = Model.Count;
    int totalPages = (int)Math.Ceiling((double)totalProducts / itemsPerPage);
}
@model List<ProductoDTO>
<div class="BodyProductos m-3">
    <div>
        <h1>Lista de productos</h1>
    </div>
    <div>
        <div id="botonNuevo">
            <button class="btn rounded-circle" id="crearProductoBtn"><i class="bi bi-plus-lg"></i></button>
            <button class="btn btn-primary rounded-2" id="textobotn" >Nuevo Producto</></button>

        </div>
        <div id="Busqueda" class="pb-3">

            <div id="selectdiv">
                <select class="form-select Precioselect" aria-label="Default select example">
                    <option value="0" selected>Filtrar por Precio</option>
                    <option value="1">Mayor a Menor</option>
                    <option value="2">Menor a Mayor</option>
                </select>
            </div>
            <div id="selectexist">
                <select class="form-select existselect" aria-label="Default select example">
                    <option value="3" selected>Filtrar por Existencias</option>
                    <option value="4">Mayor a Menor</option>
                    <option value="5">Menor a Mayor</option>
                </select>
            </div>
            <div class="cuadrotexto">
                <form action="@Url.Action("Administrador","Administrador")" method="post">
                    <div class="input-group mb-3">
                        <input hidden value="Nombre_Producto" name="busqueda">
                        <input type="text" class="form-control" name="tipo" placeholder="Buscar">
                        <button class="btn btn-outline-secondary" type="submit" id="button-addon2"><i class="bi bi-search"></i></button>

                    </div>
                </form>
            </div>
            <div class="Marca">
                <select class="form-select Marcaselect" aria-label="Default select example" onchange="redirectToFilteredProducts(this)">

                    @{
                        <option>Filtrar por Marca</option>
                        var marcasDistintas = Model.Select(prod => prod.Marca).Distinct();

                        foreach (var marca in marcasDistintas)
                        {
                            <option value="@marca">@marca</option>
                        }
                        <option value="0">Sin Filtro</option>
                    }

                </select>
            </div>

        </div>
    </div>
    <div id="contenedor_Productos" class="card-container">

        @foreach (var producto in Model)

        {
            var imagenBytes = producto.Imagen;
            var base64 = "data:image/png;base64," + Convert.ToBase64String(imagenBytes);
            <section class="seccard">
                <div class="card">
                    <img src="@base64" alt="@producto.Nombre_Producto" class="card-img-top">
                    <div class="card-body">
                        <h5 class="card-title">@producto.Nombre_Producto</h5>
                        <p id="Precio" class="card-text">Precio: $@producto.Precio</p>
                        <p class="card-text">Marca: @producto.Marca</p>
                        <p id="Exist" class="card-text">Existencias: @producto.Existencia</p>
                        <p class="card-text">Tipo: @producto.Tipo</p>
                        <div class="card-buttons">
                            <form action="@Url.Action("EditarProducto", "Administrador", new { _id = producto.Id })" method="post">
                                <button type="submit" class="btn btn-primary shadow-sm editBtn"><i class="bi bi-pencil-square"></i> Editar</button>
                            </form>
                            <form class="deleteForm" id="deleteForm-@producto.Id" action="@Url.Action("EliminarProducto", "Administrador")" method="post">
                                <input type="hidden" name="id" value="@producto.Id" />
                                <button type="submit" class="btn btn-danger shadow-sm deleteBtn"><i class="bi bi-trash3"></i> Eliminar</button>
                            </form>
                        </div>
                    </div>
                </div>

            </section>
        }



    </div>
</div>
<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @for (int i = 1; i <= totalPages; i++)
        {
            <li class="page-item @(i == currentPage ? "active" : "")">
                <a class="page-link" href="?page=@i">@i</a>
            </li>
        }
    </ul>
</nav>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const deleteForms = document.querySelectorAll(".deleteForm");
        deleteForms.forEach(function (deleteForm) {
            deleteForm.addEventListener("submit", function (event) {
                event.preventDefault();

                var productId = deleteForm.querySelector('input[name="id"]').value;

                Swal.fire({
                    title: 'Eliminar Producto',
                    text: '¿Estás seguro de que quieres eliminar este Producto?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Submit the deletion form to the server
                        deleteForm.submit();
                    }
                });
            });
        });

        document.getElementById("crearProductoBtn").addEventListener("click", function () {
            Swal.fire({
                title: 'Crear Nuevo Producto',
                text: '¿Quieres crear un nuevo Producto?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Redirect to the "CrearNuevoProducto" action
                    window.location.href = "@Url.Action("CrearNuevoProducto", "Administrador")";
                }
            });
        });

        var selectPrecio = document.querySelector(".Precioselect");
        var selectExist = document.querySelector(".existselect");

        var selectMarca = document.querySelector(".Marcaselect");
        var contenedorProductos = document.querySelector("#contenedor_Productos");
        var productos = Array.from(contenedorProductos.querySelectorAll(".seccard"));



        selectPrecio.addEventListener("change", function () {
            if (selectPrecio.value === "0") {
                // Restaurar el orden original
                location.reload();
            } else {
                ordenarProductos(selectPrecio.value);
            }
        });
        selectExist.addEventListener("change", function () {
            if (selectExist.value === "3") {
                // Restaurar el orden original
                location.reload();
            } else {
                ordenarProductos(selectExist.value);
            }
        });
        selectMarca.addEventListener("change", function () {
            var baseUrl = "@Url.Action("Administrador", "Administrador")";
            var queryString = "";

            if (selectMarca.value === "0") {
                queryString = "";
            } else {
                queryString = "?tipo=" + selectMarca.value + "&busqueda=Marca";
            }
            var url = baseUrl + queryString;
            window.location.href = url;
        });

        function ordenarProductos(opcionSeleccionada) {
            if (opcionSeleccionada === "1") {
                productos.sort(function (a, b) {
                    var precioA = parseFloat(a.querySelector("#Precio").innerText.replace("Precio: $", ""));
                    var precioB = parseFloat(b.querySelector("#Precio").innerText.replace("Precio: $", ""));

                    return precioB - precioA;
                });
            } else if (opcionSeleccionada === "2") {
                productos.sort(function (a, b) {
                    var precioA = parseFloat(a.querySelector("#Precio").innerText.replace("Precio: $", ""));
                    var precioB = parseFloat(b.querySelector("#Precio").innerText.replace("Precio: $", ""));

                    return precioA - precioB;
                });
            } else if (opcionSeleccionada === "4") {
                productos.sort(function (a, b) {
                    var precioA = parseFloat(a.querySelector("#Exist").innerText.replace("Existencias: ", ""));
                    var precioB = parseFloat(b.querySelector("#Exist").innerText.replace("Existencias: ", ""));

                    return precioB - precioA;
                });
            } else if (opcionSeleccionada === "5") {
                productos.sort(function (a, b) {
                    var precioA = parseFloat(a.querySelector("#Exist").innerText.replace("Existencias: ", ""));
                    var precioB = parseFloat(b.querySelector("#Exist").innerText.replace("Existencias: ", ""));

                    return precioA - precioB;
                });
            }

            // Vaciar el contenedor
            while (contenedorProductos.firstChild) {
                contenedorProductos.removeChild(contenedorProductos.firstChild);
            }

            // Agregar los productos ordenados al contenedor
            productos.forEach(function (producto) {
                contenedorProductos.appendChild(producto);
            });
        }
        var currentPage = 1;
        var itemsPerPage = 9; // Puedes ajustar esto según tus preferencias

        // Calcular el número total de productos y páginas
        var totalProducts = productos.length;
        var totalPages = Math.ceil(totalProducts / itemsPerPage);

        function mostrarProductosEnPagina(pageNumber) {
            currentPage = pageNumber;
            var startIndex = (currentPage - 1) * itemsPerPage;
            var endIndex = Math.min(startIndex + itemsPerPage, totalProducts); // Ajusta este cálculo

            // Vaciar el contenedor
            while (contenedorProductos.firstChild) {
                contenedorProductos.removeChild(contenedorProductos.firstChild);
            }

            // Agregar los productos ordenados al contenedor
            productos.slice(startIndex, endIndex).forEach(function (producto) {
                contenedorProductos.appendChild(producto);
            });

            // Actualizar la clase 'active' en la paginación
            var paginationItems = document.querySelectorAll(".pagination .page-item");
            paginationItems.forEach(function (item, index) {
                if (index + 1 === currentPage) {
                    item.classList.add("active");
                } else {
                    item.classList.remove("active");
                }
            });
        }

        // Inicializar la página con la primera página de productos
        mostrarProductosEnPagina(1);

        // Escuchar los clics en los elementos de paginación
        var paginationLinks = document.querySelectorAll(".pagination .page-link");
        paginationLinks.forEach(function (link) {
            link.addEventListener("click", function (event) {
                event.preventDefault();
                var pageNumber = parseInt(link.textContent);
                mostrarProductosEnPagina(pageNumber);
            });
        });
    });
</script>
